CREATE CONSTRAINT FOR (p:Player) REQUIRE p.player_id IS UNIQUE;
CREATE CONSTRAINT FOR (m:Match) REQUIRE m.match_id IS UNIQUE;
CREATE CONSTRAINT FOR (t:Tourney) REQUIRE t.tourney_id IS UNIQUE;

LOAD CSV WITH HEADERS FROM "file:///atp_players.csv" AS row
WITH row WHERE row.player_id IS NOT NULL
WITH row WHERE row.dob IS NOT NULL
MERGE (p:Player {player_id: row.player_id})
ON CREATE SET p.name = row.name_first,
p.surname = row.name_last,
p.hand = row.hand,
p.birthdate = date(datetime({epochMillis: apoc.date.parse(row.dob, 'ms', 'yyyyMMdd')})),
p.height = row.height,
p.wikidata_id = row.wikidata_id
ON MATCH SET p.count = coalesce(p.count, 0) + 1;

LOAD CSV WITH HEADERS FROM 'file:///atp_players.csv' AS row
WITH row WHERE row.ioc IS NOT NULL
MERGE (c:Country {ioc: row.ioc});

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
WITH row WHERE row.tourney_id IS NOT NULL
MERGE (t:Tournament {tourney_id: row.tourney_id})
ON CREATE SET t.name = row.tourney_name,
t.draw_size = toInteger(row.draw_size),
t.level = row.tourney_level,
t.date = date(datetime({epochMillis: apoc.date.parse(row.tourney_date, 'ms', 'yyyyMMdd')}));

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
MERGE (m:Match {match_id: row.tourney_id + '_' + row.match_num})
ON CREATE SET m.score = row.score,
m.round = row.round,
m.minutes = toInteger(row.minutes),
m.winner_rank = toInteger(row.winner_rank),
m.loser_rank = toInteger(row.loser_rank);

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
WITH row WHERE row.surface IS NOT NULL
MERGE (s:Surface {name: row.surface});


//-- Relations --

LOAD CSV WITH HEADERS FROM 'file:///atp_players.csv' AS row
MATCH (p:Player {player_id: row.player_id})
MATCH (c:Country {ioc: row.ioc})
MERGE (p)-[:REPRESENTS]->(c);

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
MATCH (t:Tournament {tourney_id: row.tourney_id})
MATCH (p1:Player {player_id: row.winner_id})
MERGE (p1)-[:PARTICIPATED_IN]->(t)
WITH t, row
MATCH (p2:Player {player_id: row.loser_id})
MERGE (p2)-[:PARTICIPATED_IN]->(t);

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
MATCH (m:Match {match_id: row.tourney_id + '_' + row.match_num})
MATCH (t:Tournament {tourney_id: row.tourney_id})
MERGE (m)-[:IN]->(t);

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
MATCH (m:Match {match_id: row.tourney_id + '_' + row.match_num})
MATCH (p1:Player {player_id: row.winner_id})
MERGE (p1)-[w:WON]->(m)
ON CREATE SET w.aces = toInteger(row.w_ace),
w.double_faults = toInteger(row.w_df),
w.serve_points = toInteger(row.w_svpt),
w.first_in = toInteger(row.w_1stIn),
w.first_won = toInteger(row.w_1stWon),
w.second_won = toInteger(row.w_2ndWon),
w.serve_games = toInteger(row.w_SvGms),
w.bp_saved = toInteger(row.w_bpSaved),
w.bp_faced = toInteger(row.w_bpFaced)
WITH m, row
MATCH (p2:Player {player_id: row.loser_id})
MERGE (p2)-[l:LOST]->(m)
ON CREATE SET l.aces = toInteger(row.l_ace),
l.double_faults = toInteger(row.l_df),
l.serve_points = toInteger(row.l_svpt),
l.first_in = toInteger(row.l_1stIn),
l.first_won = toInteger(row.l_1stWon),
l.second_won = toInteger(row.l_2ndWon),
l.serve_games = toInteger(row.l_SvGms),
l.bp_saved = toInteger(row.l_bpSaved),
l.bp_faced = toInteger(row.l_bpFaced);

LOAD CSV WITH HEADERS FROM 'file:///atp_matches_2018-2024.csv' AS row
MATCH (t:Tournament {tourney_id: row.tourney_id})
MATCH (s:Surface {name: row.surface})
MERGE (t)-[:PLAYED_ON]->(s);