//Paesi con più vittorie
MATCH (p:Player)-[:WON]->(m:Match), (p)-[:REPRESENTS]->(c:Country)
RETURN c.ioc AS Country, COUNT(m) AS Victories
ORDER BY Victories DESC
LIMIT 10;

//Paesi con più vittorie di tornei
MATCH (p:Player)-[:WON]->(m:Match), (p)-[:REPRESENTS]->(c:Country)
WHERE m.round = 'F'
RETURN c.ioc AS Country, COUNT(m) AS TournamentsWon
ORDER BY TournamentsWon DESC
LIMIT 10;

//Paesi con più vittorie di tornei e singole vittorie
MATCH (p:Player)-[:WON]->(m:Match), (p)-[:REPRESENTS]->(c:Country)
WHERE m.round = 'F'
WITH c, COUNT(m) AS TournamentsWon
MATCH (p:Player)-[:WON]->(m2:Match), (p)-[:REPRESENTS]->(c:Country)
RETURN c.ioc AS Country, TournamentsWon, COUNT(m2) AS MatchesWon
ORDER BY TournamentsWon DESC
LIMIT 10;

//Paesi con più vittorie di tornei e singole vittorie, con ratio
MATCH (p:Player)-[:WON]->(m:Match), (p)-[:REPRESENTS]->(c:Country)
WHERE m.round = 'F'
WITH c, COUNT(m) AS TournamentsWon
MATCH (p:Player)-[:WON]->(m2:Match), (p)-[:REPRESENTS]->(c:Country)
WITH c, TournamentsWon, COUNT(m2) AS MatchesWon
RETURN c.ioc AS Country, TournamentsWon, MatchesWon, (1.0*TournamentsWon/MatchesWon) AS TournamentsOverMatchesWon
ORDER BY TournamentsOverMatchesWon DESC
LIMIT 10;

//Tempo totale di ciascun torneo
MATCH (m:Match)-[:IN]->(t:Tournament)
WHERE m.minutes IS NOT NULL
RETURN t, SUM(m.minutes) AS TotalMatchDuration
ORDER BY TotalMatchDuration DESC
LIMIT 10;

//rapporto tra match vinti e persi di ciascun giocatore
MATCH (p:Player)-[:WON]->(m1:Match)
WITH p, COUNT(m1) AS wins
MATCH (p:Player)-[:LOST]->(m2:Match)
WITH p, wins, COUNT(m2) AS losses
WHERE wins + losses > 20    // to exclude players who only played very few matches
RETURN p.name, p.surname, wins, losses, (1.0*wins/(wins+losses)) AS WinRatio
ORDER BY WinRatio DESC

//numero di tornei per superficie
MATCH (t:Tournament)-[]->(s:Surface)
WITH s, COUNT(t) AS numTournaments
RETURN s.name AS Surface, numTournaments

//Partite con il maggior numero di ace
MATCH (p:Player)-[played]->(m:Match)<-[played2]-(p2:Player)
WHERE played.aces IS NOT NULL AND played2.aces IS NOT NULL AND p <> p2
RETURN p.name + ' ' + p.surname AS MostAcesPlayer, m.score AS Score, p2.name + ' ' + p2.surname AS Opponent, played.aces AS NumAces
ORDER BY NumAces DESC
LIMIT 20;

//Giocatore più giovane a vincere un torneo
MATCH (p:Player)-[:WON]->(m:Match), (m)-[:IN]->(t:Tournament)
WHERE m.round = 'F'
WITH p, t, MIN(duration.between(p.birthdate, t.date)) AS YearsChampion
WITH p, t,
    YearsChampion.years as Years,
    YearsChampion.months as Months,
    YearsChampion.days as Days,
    YearsChampion
RETURN 
    p.name + ' ' + p.surname AS Player, 
    toString(Years) + ' years ' + toString(toInteger(Months - Years*12.0)) + ' months ' + toString(Days) + ' days ' AS ChampionAt,
    t.name AS Tournament,
    t.date AS DateTournament
ORDER BY YearsChampion ASC
LIMIT 1;

//vincite di ciascun giocatore per superficie
MATCH (p:Player)-[played]->(m:Match)-[]->(t:Tournament)-[]->(s:Surface)
WHERE type(played) = "WON"
WITH p, s, count(m) AS wins
MATCH (p:Player)-[played]->(m:Match)-[]->(t:Tournament)-[]->(s:Surface)
WITH p, s,wins, count(m) AS totMatch
RETURN p.name, p.surname, s.name AS surface, wins, totMatch, 1.0*wins/totMatch AS ratio
ORDER BY p.player_id,  ratio  DESC
Limit 10;

//giocatori che si sono scontrati più volte
MATCH (p1:Player)-[:WON]->(m_won:Match)<-[:LOST]-(p2:Player)
WHERE p1.player_id < p2.player_id
WITH p1, p2, COUNT(m_won) AS NumVictoriesP1

MATCH (p1)-[:LOST]->(m_lost:Match)<-[:WON]-(p2)
WHERE p1.player_id < p2.player_id
WITH p1, p2, NumVictoriesP1, COUNT(m_lost) AS NumVictoriesP2

RETURN 
    p1.name + ' ' + p1.surname AS Player1,
    p2.name + ' ' + p2.surname AS Player2,
    NumVictoriesP1 + NumVictoriesP2 AS TotMatches,
    NumVictoriesP1,
    NumVictoriesP2
ORDER BY TotMatches DESC
LIMIT 10;

//trova i "gradi di separazione" tra due giocatori
MATCH (p1:Player {name: 'Roger', surname: 'Federer'}),
    (p2:Player {name: 'Lorenzo', surname: 'Musetti'}),
    path = shortestPath((p1)-[:WON|LOST*]-(p2))
RETURN path;

// Find "dominance cycles" of length 3 between players, on different tournaments, on the same surface
MATCH (p1:Player)-[w1:WON]->(m1:Match)-[:IN]->(t1:Tournament)-[:PLAYED_ON]->(s:Surface),
      (p2:Player)-[l1:LOST]->(m1),
      (p2)-[w2:WON]->(m2:Match)-[:IN]->(t2:Tournament)-[:PLAYED_ON]->(s),
      (p3:Player)-[l2:LOST]->(m2),
      (p3)-[w3:WON]->(m3:Match)-[:IN]->(t3:Tournament)-[:PLAYED_ON]->(s),
      (p1)-[l3:LOST]->(m3)
WHERE t1.tourney_id <> t2.tourney_id
  AND t2.tourney_id <> t3.tourney_id
  AND t1.tourney_id <> t3.tourney_id
WITH DISTINCT p1, p2, p3, s.name AS Surface,
     t1.name AS Tournament1, t1.date AS Date1,
     t2.name AS Tournament2, t2.date AS Date2,
     t3.name AS Tournament3, t3.date AS Date3
ORDER BY Date1, Date2, Date3
RETURN p1.name + ' ' + p1.surname AS Player1,
       p2.name + ' ' + p2.surname AS Player2,
       p3.name + ' ' + p3.surname AS Player3,
       Surface,
       Tournament1, Date1,
       Tournament2, Date2,
       Tournament3, Date3;
